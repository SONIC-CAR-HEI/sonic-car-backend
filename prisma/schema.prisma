// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Car {
  id          String        @id @default(uuid())
  model       String
  name        String
  description String
  price       Float
  engineType  EngineType
  placeNumber Int
  color       String
  power       Int
  available   Boolean?      @default(true)
  fav         Boolean?      @default(false)
  type        Type          @relation(fields: [typeId], references: [id])
  typeId      String
  apointement Appointment[]
  images      Image[]
  brand       Brand         @relation(fields: [brandId], references: [id])
  brandId     String
}

model Brand {
  id      String  @id @default(uuid())
  name    String
  logoUrl String?
  Car     Car[]
}

enum EngineType {
  DIESEL
  HYBRID
  ELECTRIC
  GASOLINE
}

model Type {
  id          String  @id @default(uuid())
  name        String
  description String?
  cars        Car[]
}

enum AppointmentStatus {
  PENDING
  ARCHIVED
  REJECTED
  ACCEPTED
}

model Appointment {
  id         String            @id @default(uuid())
  status     AppointmentStatus @default(PENDING)
  firstName  String
  lastName   String
  message    String
  email      String
  tel        String?
  date       DateTime          @default(now())
  approvedBy Admin?            @relation(fields: [adminId], references: [id])
  carId      String
  car        Car               @relation(fields: [carId], references: [id])
  adminId    String?
}

model Admin {
  id                    String        @id @default(uuid())
  firstName             String
  lastName              String
  email                 String
  password              String
  approvedAppointements Appointment[]
}

model Image {
  id       String @id @default(uuid())
  imageUrl String
  car      Car    @relation(fields: [carId], references: [id])
  carId    String
}
